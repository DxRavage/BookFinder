<section class="flex justify-center text-center gap-4 p-4">
  <input
    class="p-2 rounded-md border border-citron text-earie focus:outline-none focus:ring-2 focus:ring-moss focus:border-transparent"
    type="text"
    id="queryInput"
    placeholder="Enter your query"
  />
  <button
    class="bg-moss hover:bg-emerald text-silk px-4 py-2 rounded-lg cursor-pointer shadow-sm shadow-earie"
    id="updateButton">Search</button
  >
</section>

<section class="mt-8" id="bookDetails"></section>

<section
  class="mt-8 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
  id="booksContainer"
>
</section>

<script>
  let query: string = "";
  const url = "https://www.googleapis.com/books/v1/volumes?q=";
  const maxResults = 20;
  const orderBy = "relevance";
  let books: Book[] = [];
  let selectedBook: Book | null = null; // To store the currently selected book

  type Book = {
    title: string;
    authors: string[];
    description: string;
    thumbnail?: string | null;
    publishedDate?: string;
    categories?: string[];
    averageRating?: number | null;
    ratingsCount?: number | null;
    previewLink?: string;
  };

  async function fetchBooks(query: string): Promise<Book[]> {
    try {
      const apiUrl = `${url}${encodeURIComponent(query)}&maxResults=${maxResults}&orderBy=${orderBy}`;
      const res = await fetch(apiUrl);

      if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);

      const json = await res.json();

      return (
        json.items?.map((item: any) => ({
          title: item.volumeInfo?.title || "No title",
          authors: item.volumeInfo?.authors || ["Unknown"],
          description:
            item.volumeInfo?.description || "No description available",
          thumbnail: item.volumeInfo?.imageLinks?.thumbnail || null,
          publishedDate: item.volumeInfo?.publishedDate || "Unknown",
          categories: item.volumeInfo?.categories || [],
          averageRating: item.volumeInfo?.averageRating ?? null,
          ratingsCount: item.volumeInfo?.ratingsCount ?? null,
          previewLink: item.volumeInfo?.previewLink || null,
        })) ?? []
      );
    } catch (error) {
      console.error("Error fetching books:", error);
      return [];
    }
  }

  function renderBookDetails(book: Book | null) {
    const bookDetailsContainer = document.getElementById("bookDetails");
    if (!bookDetailsContainer) return;

    if (book) {
      const imageElement = book.thumbnail
        ? `<img class="w-32 h-48 object-contain rounded-md shadow-md" src=${book.thumbnail} alt="${book.title}" />`
        : `<p class="text-center text-earie">No Image Available</p>`;

      bookDetailsContainer.innerHTML = `
        <div class="bg-silk p-4 rounded-md shadow-md shadow-earie text-left">
          <div class="flex gap-4 mb-4">
            ${imageElement}
            <div>
              <h2 class="font-bold text-sm md:text-xl text-moss">${book.title}</h2>
              <p class="text-sm opacity-75 text-citron">${book.authors.join(", ")}</p>
              ${book.publishedDate ? `<p class="text-xs md:text-sm text-earie">Published: ${book.publishedDate}</p>` : ""}
              ${book.averageRating ? `<p class="text-xs md:text-sm text-earie">Rating: ${book.averageRating} (${book.ratingsCount || "No"} ratings)</p>` : ""}
              ${book.categories && book.categories.length > 0 ? `<p class="text-xs md:text-sm text-earie">Categories: ${book.categories.join(", ")}</p>` : ""}
              ${book.previewLink ? `<a href="${book.previewLink}" target="_blank" class="text-blue-500 hover:underline">Preview</a>` : ""}
              </div>
          </div>
          <p class="text-earie text-xs md:text-sm">${book.description}</p>
        </div>
      `;
      bookDetailsContainer.style.display = "block"; // Make the details visible
    } else {
      bookDetailsContainer.innerHTML = "";
      bookDetailsContainer.style.display = "none"; // Hide if no book selected
    }
  }

  function renderBooks(books: Book[]) {
    const booksContainer = document.getElementById("booksContainer");
    if (!booksContainer) return;

    booksContainer.innerHTML = "";

    if (books.length > 0) {
      books.forEach((book, index) => {
        const bookDiv = document.createElement("div");
        bookDiv.className =
          "p-4 bg-moss hover:bg-hover text-earie rounded-lg cursor-pointer shadow-sm shadow-earie mx-auto";
        bookDiv.dataset.bookIndex = index.toString(); // Store the index to retrieve book details

        bookDiv.addEventListener("click", () => {
          const index = parseInt(bookDiv.dataset.bookIndex!);
          selectedBook = books[index];
          renderBookDetails(selectedBook);
        });

        let imageElement;
        if (book.thumbnail) {
          imageElement = ` <a href="#bookDetails"> <img class="w-48 md:w-60 lg:w-96 hover:opacity-65 object-cover rounded-md shadow-sm shadow-earie" src="${book.thumbnail}" alt="${book.title}" width="150" height="200" /></a>`;
        } else {
          imageElement = `<p class="text-center text-earie">No Image Available</p>`;
        }

        bookDiv.innerHTML = `
          ${imageElement}
          <h2 class="font-bold text-xs md:text-md lg:text-lg mt-2 text-citron">${book.title}</h2>
          <p class="text-xs md:text-sm opacity-75 text-silk">${book.authors.join(", ")}</p>
        `;

        booksContainer.appendChild(bookDiv);
      });
      // Initially hide the book details section
      const bookDetailsContainer = document.getElementById("bookDetails");
      if (bookDetailsContainer) {
        bookDetailsContainer.style.display = "none";
      }
    } else {
      booksContainer.innerHTML = `<p class="text-center col-span-full text-gray-400">No books found. Try a different search.</p>`;
      // Also clear book details if no books are found
      renderBookDetails(null);
    }
  }

  async function updateQuery() {
    const inputElement = document.getElementById(
      "queryInput"
    ) as HTMLInputElement;
    if (inputElement) {
      query = inputElement.value;
      const fetchedBooks = await fetchBooks(query);
      books = fetchedBooks;
      renderBooks(books);
      // Clear the selected book when a new search is performed
      selectedBook = null;
      const bookDetailsContainer = document.getElementById("bookDetails");
      if (bookDetailsContainer) {
        bookDetailsContainer.innerHTML = "";
        bookDetailsContainer.style.display = "none";
      }
    }
  }

  document
    .getElementById("updateButton")
    ?.addEventListener("click", updateQuery);
</script>
